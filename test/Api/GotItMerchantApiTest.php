<?php
/**
 * GotItMerchantApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant APIs
 *
 * Technical document APIs for Merchant APIs
 *
 * The version of the OpenAPI document: 6.0
 * Contact: duong.vu@gotit.vn
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use Dayonevn\MerchantSDK\Api\GotItMerchantApi;
use Dayonevn\MerchantSDK\Configuration;
use Dayonevn\MerchantSDK\ApiException;
use Dayonevn\MerchantSDK\Model\RequestCheckMultipleBodySchema;
use Dayonevn\MerchantSDK\Model\RequestCheckMultipleBodySchemaSkusInfoInner;
use Dayonevn\MerchantSDK\Model\RequestMarkUseMultipleBodySchema;
use Dayonevn\MerchantSDK\Model\RequestReservedBodySchema;
use Dayonevn\MerchantSDK\Model\RequestUnReservedBodySchema;
use PHPUnit\Framework\TestCase;

/**
 * GotItMerchantApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GotItMerchantApiTest extends TestCase
{
    public GotItMerchantApi $api;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $config = new Configuration();
        $config->setHost('https://openapi-stg.gotit.vn');
        $this->api = new GotItMerchantApi(null, $config);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for checkMultiple
     *
     * Check multiple vouchers are valid or not.
     *
     * @dataProvider checkMultipleDataProvider
     *
     */
    public function testCheckMultiple($pin, $codes, $billNumber, $skusInfo, $expected)
    {
        $body = new RequestCheckMultipleBodySchema();
        $body->setPin($pin);
        $body->setCodes($codes);
        $body->setBillNumber($billNumber);

        $arraySkusInfo = [];
        foreach ($skusInfo as $skuInfoRaw) {
            $arraySkusInfo[] = $this->prepareSkusInfo($skuInfoRaw);
        }
        $body->setSkusInfo($arraySkusInfo);

        try {
            $result = $this->api->checkMultiple($body);
            $object = $result->jsonSerialize();

            // Verify SDK connect to OpenAPI was successful
            $this->assertTrue(property_exists($object, 'success'));
            $this->assertTrue(property_exists($object, 'return_code'));
            $this->assertTrue(property_exists($object, 'message_en'));
            $this->assertTrue(property_exists($object, 'message_vi'));
            $this->assertTrue(property_exists($object, 'data'));

            // Check expected data
            if (!empty($expected)) {
                $this->assertEquals($expected['success'], $object->success);
                $this->assertEquals($expected['return_code'], $object->return_code);
                $this->assertEquals($expected['message_en'], $object->message_en);
                $this->assertEquals($expected['message_vi'], $object->message_vi);
            }
        } catch (ApiException $e) {
            echo 'Exception when calling GotItMerchantApi->checkMultiple: ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for reserved
     *
     * Reserved multiple vouchers for a fixed bill number.
     *
     * @dataProvider reservedDataProvider
     *
     */
    public function testReserved($pin, $codes, $billNumber, $skusInfo, $expected)
    {
        $body = new RequestReservedBodySchema();
        $body->setPin($pin);
        $body->setCodes($codes);
        $body->setBillNumber($billNumber);

        $arraySkusInfo = [];
        foreach ($skusInfo as $skuInfoRaw) {
            $arraySkusInfo[] = $this->prepareSkusInfo($skuInfoRaw);
        }
        $body->setSkusInfo($arraySkusInfo);

        try {
            $result = $this->api->reserved($body);
            $object = $result->jsonSerialize();

            // Verify SDK connect to OpenAPI was successful
            $this->assertTrue(property_exists($object, 'success'));
            $this->assertTrue(property_exists($object, 'return_code'));
            $this->assertTrue(property_exists($object, 'message_en'));
            $this->assertTrue(property_exists($object, 'message_vi'));
            $this->assertTrue(property_exists($object, 'data'));

            // Check expected data
            if (!empty($expected)) {
                $this->assertEquals($expected['success'], $object->success);
                $this->assertEquals($expected['return_code'], $object->return_code);
                $this->assertEquals($expected['message_en'], $object->message_en);
                $this->assertEquals($expected['message_vi'], $object->message_vi);
            }
        } catch (ApiException $e) {
            echo 'Exception when calling GotItMerchantApi->reserved: ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for unreserved
     *
     * Reserved multiple vouchers for a fixed bill number..
     *
     * @dataProvider unreservedDataProvider
     */
    public function testUnreserved($pin, $codes, $billNumber, $skusInfo, $expected)
    {
        $body = new RequestUnReservedBodySchema();
        $body->setPin($pin);
        $body->setCodes($codes);
        $body->setBillNumber($billNumber);

        try {
            $result = $this->api->unreserved($body);
            $object = $result->jsonSerialize();

            // Verify SDK connect to OpenAPI was successful
            $this->assertTrue(property_exists($object, 'success'));
            $this->assertTrue(property_exists($object, 'return_code'));
            $this->assertTrue(property_exists($object, 'message_en'));
            $this->assertTrue(property_exists($object, 'message_vi'));
            $this->assertTrue(property_exists($object, 'data'));

            // Check expected data
            if (!empty($expected)) {
                $this->assertEquals($expected['success'], $object->success);
                $this->assertEquals($expected['return_code'], $object->return_code);
                $this->assertEquals($expected['message_en'], $object->message_en);
                $this->assertEquals($expected['message_vi'], $object->message_vi);
            }
        } catch (ApiException $e) {
            echo 'Exception when calling GotItMerchantApi->reserved: ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for useMultiple
     *
     * Reserved multiple vouchers for a fixed bill number..
     *
     * @dataProvider usemultipleDataProvider
     */
    public function testUseMultiple($pin, $codes, $billNumber, $skusInfo, $expected)
    {
        $body = new RequestMarkUseMultipleBodySchema();
        $body->setPin($pin);
        $body->setCodes($codes);
        $body->setBillNumber($billNumber);

        $arraySkusInfo = [];
        foreach ($skusInfo as $skuInfoRaw) {
            $arraySkusInfo[] = $this->prepareSkusInfo($skuInfoRaw);
        }
        $body->setSkusInfo($arraySkusInfo);

        try {
            $result = $this->api->useMultiple($body);
            $object = $result->jsonSerialize();

            // Verify SDK connect to OpenAPI was successful
            $this->assertTrue(property_exists($object, 'success'));
            $this->assertTrue(property_exists($object, 'return_code'));
            $this->assertTrue(property_exists($object, 'message_en'));
            $this->assertTrue(property_exists($object, 'message_vi'));
            $this->assertTrue(property_exists($object, 'data'));

            // Check expected data
            if (!empty($expected)) {
                $this->assertEquals($expected['success'], $object->success);
                $this->assertEquals($expected['return_code'], $object->return_code);
                $this->assertEquals($expected['message_en'], $object->message_en);
                $this->assertEquals($expected['message_vi'], $object->message_vi);
            }
        } catch (ApiException $e) {
            echo 'Exception when calling GotItMerchantApi->useMultiple: ', $e->getMessage(), PHP_EOL;
        }
    }

    protected function prepareSkusInfo(array $skuInfoRaw)
    {
        $skuInfo = new RequestCheckMultipleBodySchemaSkusInfoInner();
        $skuInfo->setSku($skuInfoRaw['sku']);
        $skuInfo->setQuantity($skuInfoRaw['quantity']);
        $skuInfo->setPrice($skuInfoRaw['price']);
        return $skuInfo;
    }

    public static function checkMultipleDataProvider()
    {
        return [
            // Test case 1: Data is okay
            [
                'pin'        => '4205',
                'codes'      => ['071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 2,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 3,
                        'price'    => 100000
                    ]
                ],
                'expected' => []
            ],
            // Test case 2: Data pin is invalid
            [
                'pin'        => '12121212',
                'codes'      => ['071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 2,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 3,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 200,
                    'message_en'  => 'Pin is incorrect.',
                    'message_vi'  => 'Mã pin không hợp lệ hoặc không đúng.',
                    'data'        => []
                ]
            ],
            // Test case 3: Data codes is duplicate
            [
                'pin'        => '4205',
                'codes'      => ['071717127083', '071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 1,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 1,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 231,
                    'message_en'  => 'Code is duplicate.',
                    'message_vi'  => 'Mã code bị trùng.',
                ]
            ],
            // Test case 4: Data codes is invalid
            [
                'pin'        => '4205',
                'codes'      => ['0717171270831'],
                'billNumber' => 'BILL0717171270831',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 1,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 1,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 203,
                    'message_en'  => 'Code is incorrect.',
                    'message_vi'  => 'Mã code không hợp lệ hoặc không đúng.',
                ]
            ]
        ];
    }

    public static function reservedDataProvider()
    {
        return [
            // Test case 1: Data pin is invalid
            [
                'pin'        => '12121212',
                'codes'      => ['071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 2,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 3,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 200,
                    'message_en'  => 'Pin is incorrect.',
                    'message_vi'  => 'Mã pin không hợp lệ hoặc không đúng.',
                    'data'        => []
                ]
            ],
            // Test case 2: Data codes is duplicate
            [
                'pin'        => '4205',
                'codes'      => ['071717127083', '071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 1,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 1,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 231,
                    'message_en'  => 'Code is duplicate.',
                    'message_vi'  => 'Mã code bị trùng.',
                ]
            ],
            // Test case 3: Missing bill number
            [
                'pin'        => '4205',
                'codes'      => ['071717127083'],
                'billNumber' => '',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 1,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 1,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 210,
                    'message_en'  => 'Please enter bill number.',
                    'message_vi'  => 'Vui lòng nhập mã hóa đơn.',
                ]
            ],
            // Test case 4: Sku duplicated
            [
                'pin'        => '4205',
                'codes'      => ['071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '1234567',
                        'quantity' => 1,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '1234567',
                        'quantity' => 1,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 242,
                    'message_en'  => 'Duplicate SKUs exist in the bill, please check again.',
                    'message_vi'  => 'SKU trong đơn hàng bị trùng, vui lòng kiểm tra lại.',
                ]
            ],
            // Test case 5: SKU is invalid
            [
                'pin'        => '4205',
                'codes'      => ['071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '1234567',
                        'quantity' => 2,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '12345678',
                        'quantity' => 3,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 240,
                    'message_en'  => 'The SKU(s) applied are invalid.',
                    'message_vi'  => '(Các) SKU được áp dụng không hợp lệ.',
                ]
            ]
        ];
    }

    public static function unreservedDataProvider()
    {
        return [
            // Test case 1: Data pin is invalid
            [
                'pin'        => '12121212',
                'codes'      => ['071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 2,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 3,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 200,
                    'message_en'  => 'Pin is incorrect.',
                    'message_vi'  => 'Mã pin không hợp lệ hoặc không đúng.',
                    'data'        => []
                ]
            ],
            // Test case 3: Missing bill number
            [
                'pin'        => '4205',
                'codes'      => ['071717127083'],
                'billNumber' => '',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 1,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 1,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 210,
                    'message_en'  => 'Please enter bill number.',
                    'message_vi'  => 'Vui lòng nhập mã hóa đơn.',
                ]
            ]
        ];
    }

    public static function usemultipleDataProvider()
    {
        return [
            // Test case 1: Data pin is invalid
            [
                'pin'        => '12121212',
                'codes'      => ['071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 2,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 3,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 200,
                    'message_en'  => 'Pin is incorrect.',
                    'message_vi'  => 'Mã pin không hợp lệ hoặc không đúng.',
                    'data'        => []
                ]
            ],
            // Test case 2: Data codes is duplicate
            [
                'pin'        => '4205',
                'codes'      => ['071717127083', '071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 1,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 1,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 231,
                    'message_en'  => 'Code is duplicate.',
                    'message_vi'  => 'Mã code bị trùng.',
                ]
            ],
            // Test case 3: Missing bill number
            [
                'pin'        => '4205',
                'codes'      => ['071717127083'],
                'billNumber' => '',
                'skusInfo'   => [
                    [
                        'sku'      => '3002275',
                        'quantity' => 1,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '3002980',
                        'quantity' => 1,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 210,
                    'message_en'  => 'Please enter bill number.',
                    'message_vi'  => 'Vui lòng nhập mã hóa đơn.',
                ]
            ],
            // Test case 4: Sku duplicated
            [
                'pin'        => '4205',
                'codes'      => ['071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '1234567',
                        'quantity' => 1,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '1234567',
                        'quantity' => 1,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 242,
                    'message_en'  => 'Duplicate SKUs exist in the bill, please check again.',
                    'message_vi'  => 'SKU trong đơn hàng bị trùng, vui lòng kiểm tra lại.',
                ]
            ],
            // Test case 5: SKU is invalid
            [
                'pin'        => '4205',
                'codes'      => ['071717127083'],
                'billNumber' => 'BILL071717127083',
                'skusInfo'   => [
                    [
                        'sku'      => '1234567',
                        'quantity' => 2,
                        'price'    => 100000
                    ],
                    [
                        'sku'      => '12345678',
                        'quantity' => 3,
                        'price'    => 100000
                    ]
                ],
                'expected' => [
                    'success'     => false,
                    'return_code' => 240,
                    'message_en'  => 'The SKU(s) applied are invalid.',
                    'message_vi'  => '(Các) SKU được áp dụng không hợp lệ.',
                ]
            ]
        ];
    }
}
